webpackJsonp([8],{Ihfj:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a={data:function(){return{column:"FID\tint\nFCATEID\tint\nFNAME\tvarchar\n",factory:{type:"",name:"",package:"",table:"",columns:"",output:"",alias:""},property:{xml:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="{0}">\n\n        <resultMap type="{1}" id="{2}">\n{3}\n        </resultMap>\n        {4}\n        {5}\n        {6}\n        {7}\n        {8}\n        {9}\n\n        <sql id="columns">{10}\n        </sql>\n\n</mapper>',int:"int",varchar:"String",tinyint:"int",datetime:"Date",char:"String",long:"long",text:"String"},sql:{get:'\n        <select id="get" resultMap="{0}">\n            SELECT\n            <include refid="columns" />\n            FROM\n            {1}\n            WHERE FID = #{id}\n        </select>',getList:'\n        <select id="getList" resultMap="{0}">\n            SELECT\n            <include refid="columns" />\n            FROM\n            {1}\n            WHERE 1 = 1\n            <if test="keyword != null">\n                AND FNAME LIKE CONCAT(\'%\', #{keyword}, \'%\')\n            </if>\n            ORDER BY\n            FORDER DESC , FID DESC\n            LIMIT #{start}, #{size}\n        </select>',count:'\n        <select id="count{0}" resultType="int">\n            SELECT COUNT(*)\n            FROM\n            {1}\n            WHERE 1 = 1\n            <if test="keyword != null">\n                AND FNAME LIKE CONCAT(\'%\', #{keyword}, \'%\')\n            </if>\n        </select>',delete:'\n        <delete id="delete">\n            DELETE\n            FROM\n            {0}\n            WHERE\n            FID = #{id}\n        </delete>',add:'\n        <insert id="add">\n            INSERT INTO\n            {0}\n            ({1}\n            )\n            VALUES\n            ({2}\n            )\n        </insert>',update:'\n        <update id="update">\n            UPDATE\n            {0}\n            SET{1}\n            WHERE\n                FID = #{{2}.id}\n        </update>'},rules:{type:[{required:!0,message:"请选择类型",trigger:"change"}],name:[{required:!0,message:"请输入名称",trigger:"blur"}],package:[{required:!0,message:"请输入包名",trigger:"blur"}],columns:[{required:!0,message:"请输入字段",trigger:"blur"}],table:[{required:!0,message:"请输入表名",trigger:"blur"}]}}},mounted:function(){},methods:{submit:function(t){var e=this;"Reset"!=this.factory.type?this.$refs[t].validate(function(t){if(!t)return!1;e.changeColumns(e.factory.columns),e.run(e.factory.type),e.createFileName(e.factory.type)}):this.reset()},run:function(t){switch(t){case"Xml":var e=this.capitalize(this.factory.name,"U"),n=this.factory.package.trim()+"."+e,a=this.capitalize(e,"L").trim(),i=this.factory.table.trim(),r=[],s=[],o=[],l=this.strip(this.factory.columns).split("\n").map(function(t){t=t.split("\t"),r.push(t[0]);var e=this.camelCase(t[0].substring(1).toLowerCase());s.push("#{"+a+"."+e+"}");this.property[t[1]];var n='\t\t<result column = "{0}" property = "{1}" />\n'.format(t[0],e);return o.push(t[0]+"=#{"+a+"."+e+"}"),n},this),c=this.strip(l.join("")),p=this.sql.get.format(a,i),m=this.sql.getList.format(a,i),u=this.sql.count.format(e,i),d=this.sql.delete.format(i);z=(z=(z=(z=this.sql.add.format(i,r.join(",\n\t\t"),s.join(",\n\t\t"))).replace("FID,","").replace("#{"+a+".id},","")).replace("#{"+a+".posttime},","NOW(),")).replace("#{"+a+".lmodify}","NOW()"),q=(q=(q=(q=this.sql.update.format(i,o.join(",\n\t\t"),a)).replace("FID=#{"+a+".id},","")).replace("#{"+a+".posttime},","NOW(),")).replace("#{"+a+".lmodify}","NOW()");var f=this.property.xml.format(e,n,a,c,p,m,u,d,z,q,r.join(","));this.factory.output=f;break;case"Bean":this.factory.output=this.createBean(this.factory.name);break;case"Params":var h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L"),y="import java.text.ParseException;\n\nimport org.apache.commons.lang3.time.DateUtils;\n\n",b="\tpublic {0} transformModel() throws ParseException {\n\t\t{1} {2} = new {3}();\n\t".format(h,h,g,h),v=[];this.strip(this.factory.columns).split("\n").map(function(t){t=t.split("\t");var e=this.camelCase(t[0].substring(1).toLowerCase()),n=this.capitalize(e,"U");this.isContains(e,"Time")||"posttime"==e||"lmodify"==e?v.push('\t{0}.set{1}(DateUtils.parseDate(this.get{2}(), new String[] { "yyyy-MM-dd HH:mm:ss" }));'.format(g,n,n)):v.push("\t{0}.set{1}(this.get{2}());".format(g,n,n))},this);var w="\n\t\treturn {0};\n\t}\n}".format(g),S=b+v.join("\n\t")+w;f=y+(k=this.createBean(this.factory.name+"AdminParam")).substring(0,k.length-1)+S;this.factory.output=f;break;case"VO":h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L");var L=h+"AdminVO",M=this.capitalize(L,"L");y="import org.apache.commons.lang3.time.DateFormatUtils;\n\n",b="\tpublic static {0} build({1} {2}) {\n\t\t{3} {4} = new {5}();\n\t".format(L,h,g,L,M,L),v=[];this.strip(this.factory.columns).split("\n").map(function(t){t=t.split("\t");var e=this.camelCase(t[0].substring(1).toLowerCase()),n=this.capitalize(e,"U");this.isContains(e,"Time")||"posttime"==e||"lmodify"==e?v.push('\t{0}.set{1}(DateFormatUtils.format({2}.get{3}(), "yyyy-MM-dd HH:mm:ss"));'.format(M,n,g,n)):v.push("\t{0}.set{1}({2}.get{3}());".format(M,n,g,n))},this);w="\n\t\treturn {0};\n\t}\n}".format(M);var k,O=b+v.join("\n\t")+w;f=y+(k=this.createBean(this.factory.name+"AdminVO")).substring(0,k.length-1)+O;this.factory.output=f;break;case"Dao":this.daoOrService("Dao");break;case"DaoImpl":h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L"),f=(y="import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport com.meizu.cal.utils.SqlUtils;\n\n")+(b="public class {0}DaoMysqlImpl extends BaseDao implements {1}Dao {\n".format(h,h))+(z='\n    @Override\n    public void add({0} {1}) {\n        Map<String, Object> param = new HashMap<String, Object>();\n        param.put("{2}", {3});\n        this.getSqlSession().insert("{4}.add", param);\n    }\n'.format(h,g,g,g,h))+(d='\n    @Override\n    public void delete(Long id) {\n        Map<String, Object> param = new HashMap<String, Object>();\n        param.put("id", id);\n        this.getSqlSession().delete("{0}.delete", param);\n    }\n'.format(h))+(m='\n    @Override\n    public List<{0}> getList(String keyword, int page, int size) {\n        Map<String, Object> param = new HashMap<String, Object>();\n        param.put("keyword", SqlUtils.escapeSQLLike(keyword));\n        param.put("start", (page - 1) * size);\n        param.put("size", size);\n        return this.getSqlSession().selectList("{1}.getList", param);\n    }\n'.format(h,h))+(u='\n    @Override\n    public int count{0}(String keyword) {\n        Map<String, Object> param = new HashMap<String, Object>();\n        param.put("keyword", SqlUtils.escapeSQLLike(keyword));\n        return this.getSqlSession().selectOne("{1}.count{2}", param);\n    }\n'.format(h,h,h))+(q='\n    @Override\n    public void update({0} {1}) {\n        Map<String, Object> param = new HashMap<String, Object>();\n        param.put("{2}", {3});\n        this.getSqlSession().update("{4}.update", param);\n    }\n'.format(h,g,g,g,h))+(p='\n    @Override\n    public {0} get(Long id) {\n        Map<String, Object> param = new HashMap<String, Object>();\n        param.put("id", id);\n        return this.getSqlSession().selectOne("{1}.get", param);\n    }\n'.format(h,h))+(w="}");this.factory.output=f;break;case"Service":this.daoOrService("Service");break;case"ServiceImpl":h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L"),f=(y="import java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\n")+(b="public class {0}ServiceImpl implements {1}Service {\n".format(h,h))+"\n    @Autowired\n    private {0}Dao {1}Dao;\n".format(h,g)+(z="\n    @Override\n    public void add({0} {1}) {\n        {2}Dao.add({3});\n    }\n".format(h,g,g,g))+(d="\n    @Override\n    public void delete(Long id) {\n        {0}Dao.delete(id);\n    }\n".format(g))+(m="\n    @Override\n    public List<{0}> getList(String keyword, int page, int size) {\n        return {1}Dao.getList(keyword, page, size);\n    }\n".format(h,g))+(u="\n    @Override\n    public int count{0}(String keyword) {\n        return {1}Dao.count{2}(keyword);\n    }\n".format(h,g,h))+(q="\n    @Override\n    public void update({0} {1}) {\n        {2}Dao.update({3});\n    }\n".format(h,g,g,g))+(p="\n    @Override\n    public {0} get(Long id) {\n        return {1}Dao.get(id);\n    }\n".format(h,g))+(w="}");this.factory.output=f;break;case"Controller":h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L"),f="import java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.meizu.cal.model.constants.BaseResultModel;\nimport com.meizu.cal.utils.CheckUtil;\nimport com.meizu.cal.web.log.OperationLog;\n\n"+(b='@Controller\n@RequestMapping(value = "/admin/{0}")\npublic class {1}Controller {\n'.format(g.toLowerCase(),h))+"\n    @Autowired\n    private {0}Service {1}Service;\n".format(h,g)+'\n    @RequestMapping("/list")\n    @ResponseBody\n    public BaseResultModel get{0}List(@RequestParam(required = false) String keyword,int page, int size) {\n        List<{1}> {2}s = {3}Service.getList(keyword, page, size);\n        List<{4}AdminVO> {5}AdminVOs = new ArrayList<{6}AdminVO>();\n        for ({7} {8} : {9}s) {\n            {10}AdminVOs.add({11}AdminVO.build({12}));\n        }\n        JSONObject value = new JSONObject();\n        value.put("data", {13}AdminVOs);\n        value.put("total", {14}Service.count{15}(keyword));\n        BaseResultModel baseResultModel = new BaseResultModel();\n        baseResultModel.setValue(value);\n        return baseResultModel;\n    }\n'.format(h,h,g,g,h,g,h,h,g,g,g,h,g,g,g,h)+(z='\n    @RequestMapping("/add")\n    @ResponseBody\n    @OperationLog\n    public BaseResultModel add{0}({1}AdminParam {2}AdminParam) throws ParseException{\n        {3}Service.add({4}AdminParam.transformModel());\n        BaseResultModel baseResultModel = new BaseResultModel();\n        baseResultModel.setValue(Boolean.TRUE);\n        return baseResultModel;\n    }\n'.format(h,h,g,g,g))+(d='\n    @RequestMapping("/del")\n    @ResponseBody\n    @OperationLog\n    public BaseResultModel delte{0}(Long id) {\n        {1}Service.delete(id);\n        BaseResultModel baseResultModel = new BaseResultModel();\n        baseResultModel.setValue(Boolean.TRUE);\n        return baseResultModel;\n    }\n'.format(h,g))+(q='\n    @RequestMapping(value = "/update")\n    @ResponseBody\n    @OperationLog\n    public BaseResultModel update{0}({1}AdminParam {2}AdminParam) throws ParseException{\n        CheckUtil.checkLLeZero({5}AdminParam.getId(), "id 不能为空");\n        {3}Service.update({4}AdminParam.transformModel());\n        BaseResultModel baseResultModel = new BaseResultModel();\n        baseResultModel.setValue(Boolean.TRUE);\n        return baseResultModel;\n    }\n'.format(h,h,g,g,g,g))+(p='\n    @RequestMapping("/get")\n    @ResponseBody\n    public BaseResultModel get{0}(Long id) {\n        CheckUtil.checkLLeZero({6}AdminParam.getId(), "id 不能为空");\n        {1} {2} = {3}Service.get(id);\n        BaseResultModel baseResultModel = new BaseResultModel();\n        baseResultModel.setValue({4}AdminVO.build({5}));\n        return baseResultModel;\n    }\n'.format(h,h,g,g,h,g,g))+(w="}");this.factory.output=f;break;case"DaoMysqlImplTest":h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L");this.factory.alias="{0}DaoMysqlImplTest".format(h);i=this.factory.table.trim(),y="import java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.testng.Assert;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\n",v='public class {0}DaoMysqlImplTest extends TestDaoBase {\n\n\t@Autowired\n\tprivate {1}DaoMysqlImpl {2}DaoMysqlImpl;\n\n\t@BeforeClass\n\tpublic void beforeClass() {\n\t\tthis.init("{3}");\n\t}\n\n\t@AfterClass\n\tpublic void afterClass() {\n\t\tthis.deleteFromTables("{4}");\n\t}\n\n'.format(h,h,g,i,i);var I='\t@Test\n\tpublic void testAdd() throws Exception {\n\t\t{0} {1} = CreateBean.newInstance({2}.class);\n\t\t{4}DaoMysqlImpl.add({5});\n\t\tAssert.assertEquals(this.countRowsInTable("{6}"), 2);\n\t}\n\n'.format(h,g,h,g,g,i),R='\t@Test\n\tpublic void testDelete() throws Exception {\n\t\tLong id = 1L;\n\t\t{0}DaoMysqlImpl.delete(id);\n\t\tAssert.assertEquals(this.countRowsInTable("{1}"), 0);\n\t}\n\n'.format(g,i),D="\t@Test\n\tpublic void testGetList() throws Exception {\n\t\tString keyword = null;\n\t\tInteger page = 1;\n\t\tInteger size = 1;\n\t\tList<{0}> result = {1}DaoMysqlImpl.getList(keyword, page, size);\n\t\tAssert.assertEquals(result.size(), 1);\n\t}\n\n".format(h,g),E="\t@Test\n\tpublic void testCount{0}() throws Exception {\n\t\tString keyword = null;\n\t\tint result = {1}DaoMysqlImpl.count{2}(keyword);\n\t\tAssert.assertEquals(result, 1);\n\t}\n\n".format(h,g,h),T='\t@Test\n\tpublic void testUpdate() throws Exception {\n\t\t{0} {1} = CreateBean.newInstance({2}.class);\n\t\t{3}DaoMysqlImpl.update({4});\n\t\tAssert.assertEquals(this.countRowsInTable("{5}"), 1);\n\t}\n\n'.format(h,g,h,g,g,i),A="\t@Test\n\tpublic void testGet() throws Exception {\n\t\tLong id = 1L;\n\t\t{0} result = {1}DaoMysqlImpl.get(id);\n\t\tAssert.assertNotNull(result);\n\t}\n\n".format(h,g);w="}";this.factory.output=y+v+I+E+R+D+T+A+w;break;case"DaoAndServiceXml":h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L");var C=this.factory.package.trim();f='    <bean id="{0}Dao" class="{1}.{2}DaoMysqlImpl">\n\t<property name="sqlSessionFactory" ref="calSqlSessionFactory"></property>\n    </bean>\n\n\n'.format(g,C,h)+'    <bean id="{0}ServiceImpl" class="{1}.{2}ServiceImpl" />'.format(g,C,h);this.factory.output=f;break;case"ServiceImplTest":var z,q;h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L"),f="import java.util.List;\nimport java.util.ArrayList;\n\nimport org.testng.Assert;\nimport org.testng.annotations.Test;\n\nimport mockit.Expectations;\nimport mockit.Injectable;\nimport mockit.Tested;\nimport mockit.VerificationsInOrder;\n\n"+(b="public class {0}ServiceImplTest {\n\n".format(h))+("    @Injectable\n"+"    private {0}Dao {1}Dao;\n\n".format(h,g))+("    @Tested\n"+"    private {0}ServiceImpl {1}ServiceImpl;\n\n".format(h,g))+(z="    @Test\n    public void testAdd() throws Exception {\n        final {0} {1} = new {2}();\n        {3}ServiceImpl.add({4});\n        new VerificationsInOrder() {\n            {\n                {5}Dao.add({6});\n            }\n        };\n    }\n\n".format(h,g,h,g,g,g,g))+(d="    @Test\n    public void testDelete() throws Exception {\n        Long id = 1L;\n        {0}ServiceImpl.delete(id);\n        new VerificationsInOrder() {\n            {\n                {1}ServiceImpl.delete(anyLong);\n            }\n        };\n    }\n\n".format(g,g))+(m="    @Test\n    public void testGetList() throws Exception {\n        final List<{0}> {1}s = new ArrayList<{2}>();\n        new Expectations() {\n            {\n                {3}Dao.getList(anyString, anyInt, anyInt);\n                result = {4}s;\n            }\n        };\n        String keyword = null;\n        int page = 1;\n        int size = 1;\n        List<{5}> result = {6}ServiceImpl.getList(keyword, page, size);\n        Assert.assertSame(result, {7}s);\n    }\n\n".format(h,g,h,g,g,h,g,g))+(u="    @Test\n    public void testCount{0}() throws Exception {\n        final int count = 0;\n        new Expectations() {\n            {\n                {1}Dao.count{2}(anyString);\n            }\n        };\n        String keyword = null;\n        int result = {3}ServiceImpl.count{4}(keyword);\n        Assert.assertSame(result, count);\n    }\n\n".format(h,g,h,g,h))+(q="    @Test\n    public void testUpdate() throws Exception {\n        final {0} {1} = new {2}();\n        {3}ServiceImpl.update({4});\n        new VerificationsInOrder() {\n            {\n                {5}ServiceImpl.update({6});\n            }\n        };\n    }\n\n".format(h,g,h,g,g,g,g))+(p="    @Test\n    public void testGet() throws Exception {\n        final {0} {1} = new {2}();\n        new Expectations() {\n            {\n                {3}Dao.get(anyLong);\n                result = {4};\n            }\n        };\n        Long id = 1L;\n        {5} result = {6}ServiceImpl.get(id);\n        Assert.assertSame(result, {7});\n    }\n\n".format(h,g,h,g,g,h,g,g))+(w="}");this.factory.output=f;break;case"Test":this.factory.alias="";p=this.getter(this.factory.name);var x=this.getColunm();h=this.capitalize(this.factory.name,"U"),g=this.capitalize(h,"L"),f='    map.put("{0}", new Runnable() {\n            @Override\n            public void run() {\n                TestDaoBase.this.deleteFromTables("{1}");\n\n                {2} {3} = CreateBean.newInstance({4}.class);\n                {5}.setId(1L);\n                TestDaoBase.this.jdbcTemplate\n                        .update("INSERT INTO {6} ({7})"\n                                + "VALUES ({8})",\n                                new Object[] { {9} });\n            }\n        });'.format(this.factory.table,this.factory.table,h,g,h,g,this.factory.table,x.join(","),this.addMark(x).join(","),p.join(","));this.factory.output=f}},reset:function(){this.factory.name="",this.factory.columns="",this.factory.output="",this.factory.package="",this.factory.table="",this.factory.alias=""},capitalize:function(t,e){try{t=t.trim();if("L"==e)return t.replace(/\b(\w)|\s(\w)/g,function(t){return t.toLowerCase()});if("U"==e)return t.replace(/\b(\w)|\s(\w)/g,function(t){return t.toUpperCase()})}catch(t){}},camelCase:function(t){return t.indexOf("_")>0&&(t=t.split("_")[0]+this.capitalize(t.split("_")[1],"U")+this.capitalize(t.split("_")[2],"U")+this.capitalize(t.split("_")[3],"U")+this.capitalize(t.split("_")[4],"U")+this.capitalize(t.split("_")[5],"U")),t.replace(new RegExp("undefined","gm"),"")},strip:function(t){return t.replace(/^\n+|\n+$/g,"")},createBean:function(t){t=this.capitalize(t,"U").trim();var e=[],n=[];return this.strip(this.factory.columns).split("\n").map(function(a){a=a.split("\t");var i=this.camelCase(a[0].substring(1).toLowerCase()),r=this.property[a[1]];(this.isContains(t,"VO")||this.isContains(t,"Param"))&&(this.isContains(i,"Time")||"posttime"==i||"lmodify"==i)&&(r="String"),e.push("private {0} {1};\n".format(r,i));var s="public {0} get{1}()".format(r,this.capitalize(i,"U"))+"{\n\t\t"+"return {0};\n\t".format(i)+"}\n",o="public void set{0}({1} {2})".format(this.capitalize(i,"U"),r,i)+"{\n\t\t"+"this.{0} = {1};\n\t".format(i,i)+"}\n";n.push(s),n.push(o)},this),"public class {0}".format(t)+"{\n\n\t"+e.join("\n\t")+"\n\t"+n.join("\n\t")+"\n}"},daoOrService:function(t){var e=this.capitalize(this.factory.name,"U"),n=this.capitalize(e,"L"),a="import java.util.List;\n\n"+"public interface {0} {\n".format("Service"==t?e+"Service":e+"Dao")+"\n\tvoid add({0} {1});\n".format(e,n)+"\n\tvoid delete(Long id);\n"+"\n\tList<{0}> getList(String keyword,int page,int size);\n".format(e)+"\n\tint count{0}(String keyword);\n".format(e)+"\n\tvoid update({0} {1});\n".format(e,n)+"\n\t{0} get(Long id);\n".format(e)+"}";this.factory.output=a},isContains:function(t,e){return t.indexOf(e)>=0},getter:function(t){var e=[];return this.strip(this.factory.columns).split("\n").map(function(n){e.push("{0}.get{1}()".format(this.capitalize(t,"L"),this.capitalize(this.camelCase(n.split("\t")[0].substring(1).toLowerCase()),"U")))},this),e},getColunm:function(){var t=[];return this.strip(this.factory.columns).split("\n").map(function(e){t.push(e.split("\t")[0])},this),t},addMark:function(t){var e=[];return t.map(function(t){e.push("?")}),e},createFileName:function(t){var e=this.capitalize(this.factory.name,"U");switch(t){case"Xml":case"Bean":this.factory.alias=e;break;case"Params":this.factory.alias="{0}AdminParam".format(e);break;case"VO":this.factory.alias="{0}AdminVO".format(e);break;case"Dao":this.factory.alias="{0}Dao".format(e);break;case"DaoImpl":this.factory.alias="{0}DaoMysqlImpl".format(e);break;case"Service":this.factory.alias="{0}Service".format(e);break;case"ServiceImpl":this.factory.alias="{0}ServiceImpl".format(e);break;case"Controller":this.factory.alias="{0}Controller".format(e);break;case"ServiceImplTest":this.factory.alias="{0}ServiceImplTest".format(e)}},changeColumns:function(t){var e=this,n=t.split("\n"),a=new Array;n.map(function(t){e.isContains(t,"ID")?a.push(t.replace("int","long")):a.push(t)}),this.factory.columns=a.join("\n")}}},i={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"container"}},[n("el-form",{ref:"factory",attrs:{model:t.factory,rules:t.rules,"label-width":"80px"}},[n("el-form-item",{attrs:{label:"类名",prop:"name"}},[n("el-input",{attrs:{placeholder:"Test"},model:{value:t.factory.name,callback:function(e){t.$set(t.factory,"name",e)},expression:"factory.name"}})],1),t._v(" "),n("el-form-item",{attrs:{label:"包名",prop:"package"}},[n("el-input",{attrs:{placeholder:"com.xxx.demo"},model:{value:t.factory.package,callback:function(e){t.$set(t.factory,"package",e)},expression:"factory.package"}})],1),t._v(" "),n("el-form-item",{attrs:{label:"表名",prop:"table"}},[n("el-input",{attrs:{placeholder:"T_NEW_BOOK"},model:{value:t.factory.table,callback:function(e){t.$set(t.factory,"table",e)},expression:"factory.table"}})],1),t._v(" "),n("el-form-item",{attrs:{label:"字段",prop:"columns"}},[n("el-input",{attrs:{type:"textarea",autosize:{minRows:7,maxRows:7},placeholder:t.column},model:{value:t.factory.columns,callback:function(e){t.$set(t.factory,"columns",e)},expression:"factory.columns"}})],1),t._v(" "),n("el-form-item",{attrs:{label:"类型",prop:"type"}},[n("el-radio-group",{on:{change:function(e){t.submit("factory")}},model:{value:t.factory.type,callback:function(e){t.$set(t.factory,"type",e)},expression:"factory.type"}},[n("el-radio",{attrs:{label:"Xml"}}),t._v(" "),n("el-radio",{attrs:{label:"Bean"}}),t._v(" "),n("el-radio",{attrs:{label:"Params"}}),t._v(" "),n("el-radio",{attrs:{label:"VO"}}),t._v(" "),n("el-radio",{attrs:{label:"Dao"}}),t._v(" "),n("el-radio",{attrs:{label:"DaoImpl"}}),t._v(" "),n("el-radio",{attrs:{label:"Service"}}),t._v(" "),n("el-radio",{attrs:{label:"ServiceImpl"}}),t._v(" "),n("el-radio",{attrs:{label:"DaoAndServiceXml"}}),t._v(" "),n("el-radio",{attrs:{label:"Controller"}}),t._v(" "),n("el-radio",{attrs:{label:"Test"}}),t._v(" "),n("el-radio",{attrs:{label:"DaoMysqlImplTest"}}),t._v(" "),n("el-radio",{attrs:{label:"ServiceImplTest"}})],1)],1),t._v(" "),n("el-form-item",{attrs:{label:"新建"}},[n("el-input",{model:{value:t.factory.alias,callback:function(e){t.$set(t.factory,"alias",e)},expression:"factory.alias"}})],1),t._v(" "),n("el-form-item",{attrs:{label:"输出"}},[n("el-input",{attrs:{type:"textarea",autosize:{minRows:20,maxRows:20}},model:{value:t.factory.output,callback:function(e){t.$set(t.factory,"output",e)},expression:"factory.output"}})],1)],1)],1)},staticRenderFns:[]},r=n("VU/8")(a,i,!1,null,null,null);e.default=r.exports}});